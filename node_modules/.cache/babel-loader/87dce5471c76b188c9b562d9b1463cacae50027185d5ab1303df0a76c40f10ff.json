{"ast":null,"code":"function fromHex(hexStr) {\n  const normalized = hexStr.startsWith(\"0x\") ? hexStr.slice(2) : hexStr;\n  const padded = normalized.length % 2 === 0 ? normalized : `0${normalized}}`;\n  const intArr = padded.match(/.{2}/g)?.map(byte => parseInt(byte, 16)) ?? [];\n  return Uint8Array.from(intArr);\n}\nfunction toHex(bytes) {\n  return bytes.reduce((str, byte) => str + byte.toString(16).padStart(2, \"0\"), \"\");\n}\nconst toHEX = toHex;\nconst fromHEX = fromHex;\nexport { fromHEX, fromHex, toHEX, toHex };","map":{"version":3,"names":["fromHex","hexStr","normalized","startsWith","slice","padded","length","intArr","match","map","byte","parseInt","Uint8Array","from","toHex","bytes","reduce","str","toString","padStart","toHEX","fromHEX"],"sources":["/home/cala/project/bridgeweb/node_modules/@suiet/wallet-kit/node_modules/@mysten/bcs/src/hex.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nexport function fromHex(hexStr: string): Uint8Array {\n\tconst normalized = hexStr.startsWith('0x') ? hexStr.slice(2) : hexStr;\n\tconst padded = normalized.length % 2 === 0 ? normalized : `0${normalized}}`;\n\tconst intArr = padded.match(/.{2}/g)?.map((byte) => parseInt(byte, 16)) ?? [];\n\n\treturn Uint8Array.from(intArr);\n}\n\nexport function toHex(bytes: Uint8Array): string {\n\treturn bytes.reduce((str, byte) => str + byte.toString(16).padStart(2, '0'), '');\n}\n\n/** @deprecated use toHex instead */\nexport const toHEX = toHex;\n\n/** @deprecated use fromHex instead */\nexport const fromHEX = fromHex;\n"],"mappings":"AAGO,SAASA,QAAQC,MAAA,EAA4B;EACnD,MAAMC,UAAA,GAAaD,MAAA,CAAOE,UAAA,CAAW,IAAI,IAAIF,MAAA,CAAOG,KAAA,CAAM,CAAC,IAAIH,MAAA;EAC/D,MAAMI,MAAA,GAASH,UAAA,CAAWI,MAAA,GAAS,MAAM,IAAIJ,UAAA,GAAa,IAAIA,UAAU;EACxE,MAAMK,MAAA,GAASF,MAAA,CAAOG,KAAA,CAAM,OAAO,GAAGC,GAAA,CAAKC,IAAA,IAASC,QAAA,CAASD,IAAA,EAAM,EAAE,CAAC,KAAK,EAAC;EAE5E,OAAOE,UAAA,CAAWC,IAAA,CAAKN,MAAM;AAC9B;AAEO,SAASO,MAAMC,KAAA,EAA2B;EAChD,OAAOA,KAAA,CAAMC,MAAA,CAAO,CAACC,GAAA,EAAKP,IAAA,KAASO,GAAA,GAAMP,IAAA,CAAKQ,QAAA,CAAS,EAAE,EAAEC,QAAA,CAAS,GAAG,GAAG,GAAG,EAAE;AAChF;AAGO,MAAMC,KAAA,GAAQN,KAAA;AAGd,MAAMO,OAAA,GAAUrB,OAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}