{"ast":null,"code":"import { create as superstructCreate } from \"superstruct\";\nfunction create(value, struct) {\n  return superstructCreate(value, struct);\n}\nfunction extractMutableReference(normalizedType) {\n  return typeof normalizedType === \"object\" && \"MutableReference\" in normalizedType ? normalizedType.MutableReference : void 0;\n}\nfunction extractReference(normalizedType) {\n  return typeof normalizedType === \"object\" && \"Reference\" in normalizedType ? normalizedType.Reference : void 0;\n}\nfunction extractStructTag(normalizedType) {\n  if (typeof normalizedType === \"object\" && \"Struct\" in normalizedType) {\n    return normalizedType;\n  }\n  const ref = extractReference(normalizedType);\n  const mutRef = extractMutableReference(normalizedType);\n  if (typeof ref === \"object\" && \"Struct\" in ref) {\n    return ref;\n  }\n  if (typeof mutRef === \"object\" && \"Struct\" in mutRef) {\n    return mutRef;\n  }\n  return void 0;\n}\nexport { create, extractMutableReference, extractReference, extractStructTag };","map":{"version":3,"names":["create","superstructCreate","value","struct","extractMutableReference","normalizedType","MutableReference","extractReference","Reference","extractStructTag","ref","mutRef"],"sources":["/home/cala/project/bridgeweb/node_modules/@mysten/sui.js/src/transactions/utils.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { Struct } from 'superstruct';\nimport { create as superstructCreate } from 'superstruct';\n\nimport type { SuiMoveNormalizedType } from '../client/index.js';\n\nexport function create<T, S>(value: T, struct: Struct<T, S>): T {\n\treturn superstructCreate(value, struct);\n}\n\nexport function extractMutableReference(\n\tnormalizedType: SuiMoveNormalizedType,\n): SuiMoveNormalizedType | undefined {\n\treturn typeof normalizedType === 'object' && 'MutableReference' in normalizedType\n\t\t? normalizedType.MutableReference\n\t\t: undefined;\n}\n\nexport function extractReference(\n\tnormalizedType: SuiMoveNormalizedType,\n): SuiMoveNormalizedType | undefined {\n\treturn typeof normalizedType === 'object' && 'Reference' in normalizedType\n\t\t? normalizedType.Reference\n\t\t: undefined;\n}\n\nexport function extractStructTag(\n\tnormalizedType: SuiMoveNormalizedType,\n): Extract<SuiMoveNormalizedType, { Struct: unknown }> | undefined {\n\tif (typeof normalizedType === 'object' && 'Struct' in normalizedType) {\n\t\treturn normalizedType;\n\t}\n\n\tconst ref = extractReference(normalizedType);\n\tconst mutRef = extractMutableReference(normalizedType);\n\n\tif (typeof ref === 'object' && 'Struct' in ref) {\n\t\treturn ref;\n\t}\n\n\tif (typeof mutRef === 'object' && 'Struct' in mutRef) {\n\t\treturn mutRef;\n\t}\n\treturn undefined;\n}\n"],"mappings":"AAIA,SAASA,MAAA,IAAUC,iBAAA,QAAyB;AAIrC,SAASD,OAAaE,KAAA,EAAUC,MAAA,EAAyB;EAC/D,OAAOF,iBAAA,CAAkBC,KAAA,EAAOC,MAAM;AACvC;AAEO,SAASC,wBACfC,cAAA,EACoC;EACpC,OAAO,OAAOA,cAAA,KAAmB,YAAY,sBAAsBA,cAAA,GAChEA,cAAA,CAAeC,gBAAA,GACf;AACJ;AAEO,SAASC,iBACfF,cAAA,EACoC;EACpC,OAAO,OAAOA,cAAA,KAAmB,YAAY,eAAeA,cAAA,GACzDA,cAAA,CAAeG,SAAA,GACf;AACJ;AAEO,SAASC,iBACfJ,cAAA,EACkE;EAClE,IAAI,OAAOA,cAAA,KAAmB,YAAY,YAAYA,cAAA,EAAgB;IACrE,OAAOA,cAAA;EACR;EAEA,MAAMK,GAAA,GAAMH,gBAAA,CAAiBF,cAAc;EAC3C,MAAMM,MAAA,GAASP,uBAAA,CAAwBC,cAAc;EAErD,IAAI,OAAOK,GAAA,KAAQ,YAAY,YAAYA,GAAA,EAAK;IAC/C,OAAOA,GAAA;EACR;EAEA,IAAI,OAAOC,MAAA,KAAW,YAAY,YAAYA,MAAA,EAAQ;IACrD,OAAOA,MAAA;EACR;EACA,OAAO;AACR","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}