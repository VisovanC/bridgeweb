{"ast":null,"code":"var _jsxFileName = \"/home/cala/project/bridgeweb/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { useWallet, ConnectButton } from \"@suiet/wallet-kit\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [ethereumAccount, setEthereumAccount] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n  const wallet = useWallet();\n\n  // Connect to Ethereum Wallet (MetaMask)\n  const connectEthereumWallet = async () => {\n    if (typeof window.ethereum !== \"undefined\") {\n      try {\n        const accounts = await window.ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n        setEthereumAccount(accounts[0]);\n      } catch (error) {\n        console.error(\"MetaMask connection failed: \", error);\n      }\n    } else {\n      alert(\"MetaMask is not installed!\");\n    }\n  };\n\n  // Bridge tokens from Ethereum to Sui\n  const bridgeToSui = async () => {\n    if (!ethereumAccount || !wallet.connected || !amount) {\n      alert(\"Please connect both wallets and specify an amount.\");\n      return;\n    }\n    try {\n      // Step 1: Convert ETH to IBT on Ethereum\n      const provider = new ethers.providers.JsonRpcProvider(\"http://127.0.0.1:8545\"); // Replace with your Ethereum provider\n      const signer = provider.getSigner(ethereumAccount);\n      const ethContractAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\"; // Replace with your Ethereum contract address\n      const ethAbi = [{\n        \"type\": \"function\",\n        \"name\": \"convertETHToIBT\",\n        \"inputs\": [],\n        \"outputs\": [],\n        \"stateMutability\": \"payable\"\n      }];\n      const ethContract = new ethers.Contract(ethContractAddress, ethAbi, signer);\n      const transaction = await ethContract.convertETHToIBT({\n        value: ethers.utils.parseEther(amount) // Convert amount to Ether\n      });\n      await transaction.wait(); // Wait for the transaction to complete\n      console.log(`Converted ${amount} ETH to IBT`);\n\n      // Step 2: Mint IBT tokens on Sui\n      const suiTransaction = {\n        packageObjectId: \"0x9330eb39cba20119511b782e48f2695ab242414e80342b0a69972d0bf4e32298\",\n        // Replace with your Sui package ID\n        module: \"suipart\",\n        function: \"mint\",\n        arguments: [wallet.address, parseFloat(amount)] // Convert amount to Sui-compatible format\n      };\n      await wallet.signAndExecuteTransaction({\n        transaction: {\n          kind: \"moveCall\",\n          data: suiTransaction\n        }\n      });\n      alert(`Successfully bridged ${amount} ETH to IBT on Sui!`);\n    } catch (error) {\n      console.error(\"Error bridging tokens: \", error);\n      alert(\"Failed to bridge tokens.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center justify-center min-h-screen p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"Blockchain Bridge \\uD83C\\uDF09\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: connectEthereumWallet,\n        className: \"px-4 py-2 bg-blue-500 text-white rounded shadow\",\n        children: \"Connect Ethereum Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), ethereumAccount && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Connected Ethereum: \", ethereumAccount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(ConnectButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), wallet.connected && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Connected Sui: \", wallet.address]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Amount to Bridge\",\n        value: amount,\n        onChange: e => setAmount(e.target.value),\n        className: \"p-2 border rounded w-64\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: bridgeToSui,\n      className: \"px-4 py-2 bg-purple-500 text-white rounded shadow\",\n      children: \"Bridge Tokens to Sui\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"DhHlpp6C2Usf7OLaMNqUbjwEwzU=\", false, function () {\n  return [useWallet];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","ethers","useWallet","ConnectButton","jsxDEV","_jsxDEV","App","_s","ethereumAccount","setEthereumAccount","amount","setAmount","wallet","connectEthereumWallet","window","ethereum","accounts","request","method","error","console","alert","bridgeToSui","connected","provider","providers","JsonRpcProvider","signer","getSigner","ethContractAddress","ethAbi","ethContract","Contract","transaction","convertETHToIBT","value","utils","parseEther","wait","log","suiTransaction","packageObjectId","module","function","arguments","address","parseFloat","signAndExecuteTransaction","kind","data","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","placeholder","onChange","e","target","_c","$RefreshReg$"],"sources":["/home/cala/project/bridgeweb/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { useWallet, ConnectButton } from \"@suiet/wallet-kit\";\n\nconst App = () => {\n  const [ethereumAccount, setEthereumAccount] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n  const wallet = useWallet();\n\n  // Connect to Ethereum Wallet (MetaMask)\n  const connectEthereumWallet = async () => {\n    if (typeof window.ethereum !== \"undefined\") {\n      try {\n        const accounts = await window.ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        setEthereumAccount(accounts[0]);\n      } catch (error) {\n        console.error(\"MetaMask connection failed: \", error);\n      }\n    } else {\n      alert(\"MetaMask is not installed!\");\n    }\n  };\n\n  // Bridge tokens from Ethereum to Sui\n  const bridgeToSui = async () => {\n    if (!ethereumAccount || !wallet.connected || !amount) {\n      alert(\"Please connect both wallets and specify an amount.\");\n      return;\n    }\n\n    try {\n      // Step 1: Convert ETH to IBT on Ethereum\n      const provider = new ethers.providers.JsonRpcProvider(\n        \"http://127.0.0.1:8545\"\n      ); // Replace with your Ethereum provider\n      const signer = provider.getSigner(ethereumAccount);\n      const ethContractAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\"; // Replace with your Ethereum contract address\n      const ethAbi = [\n        {\n          \"type\": \"function\",\n          \"name\": \"convertETHToIBT\",\n          \"inputs\": [],\n          \"outputs\": [],\n          \"stateMutability\": \"payable\",\n        },\n      ];\n      const ethContract = new ethers.Contract(\n        ethContractAddress,\n        ethAbi,\n        signer\n      );\n\n      const transaction = await ethContract.convertETHToIBT({\n        value: ethers.utils.parseEther(amount), // Convert amount to Ether\n      });\n      await transaction.wait(); // Wait for the transaction to complete\n      console.log(`Converted ${amount} ETH to IBT`);\n\n      // Step 2: Mint IBT tokens on Sui\n      const suiTransaction = {\n        packageObjectId: \"0x9330eb39cba20119511b782e48f2695ab242414e80342b0a69972d0bf4e32298\", // Replace with your Sui package ID\n        module: \"suipart\",\n        function: \"mint\",\n        arguments: [wallet.address, parseFloat(amount)], // Convert amount to Sui-compatible format\n      };\n      await wallet.signAndExecuteTransaction({\n        transaction: {\n          kind: \"moveCall\",\n          data: suiTransaction,\n        },\n      });\n\n      alert(`Successfully bridged ${amount} ETH to IBT on Sui!`);\n    } catch (error) {\n      console.error(\"Error bridging tokens: \", error);\n      alert(\"Failed to bridge tokens.\");\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col items-center justify-center min-h-screen p-4\">\n      <h1 className=\"text-2xl font-bold mb-4\">Blockchain Bridge ðŸŒ‰</h1>\n      \n      {/* Ethereum Wallet Section */}\n      <div className=\"mb-4\">\n        <button\n          onClick={connectEthereumWallet}\n          className=\"px-4 py-2 bg-blue-500 text-white rounded shadow\"\n        >\n          Connect Ethereum Wallet\n        </button>\n        {ethereumAccount && <p>Connected Ethereum: {ethereumAccount}</p>}\n      </div>\n\n      {/* Sui Wallet Section */}\n      <div className=\"mb-4\">\n        <ConnectButton />\n        {wallet.connected && <p>Connected Sui: {wallet.address}</p>}\n      </div>\n\n      {/* Input Section */}\n      <div className=\"mb-4\">\n        <input\n          type=\"number\"\n          placeholder=\"Amount to Bridge\"\n          value={amount}\n          onChange={(e) => setAmount(e.target.value)}\n          className=\"p-2 border rounded w-64\"\n        />\n      </div>\n\n      {/* Bridge Button */}\n      <button\n        onClick={bridgeToSui}\n        className=\"px-4 py-2 bg-purple-500 text-white rounded shadow\"\n      >\n        Bridge Tokens to Sui\n      </button>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}