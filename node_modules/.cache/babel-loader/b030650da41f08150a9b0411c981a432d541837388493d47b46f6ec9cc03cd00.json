{"ast":null,"code":"/**\n * NIST secp256r1 aka p256.\n * https://www.secg.org/sec2-v2.pdf, https://neuromancer.sk/std/nist/P-256\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { createCurve } from './_shortw_utils.js';\nimport { createHasher } from './abstract/hash-to-curve.js';\nimport { Field } from './abstract/modular.js';\nimport { mapToCurveSimpleSWU } from './abstract/weierstrass.js';\nconst Fp256 = Field(BigInt('0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff'));\nconst CURVE_A = Fp256.create(BigInt('-3'));\nconst CURVE_B = BigInt('0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b');\n/** secp256r1 curve, ECDSA and ECDH methods. */\n// prettier-ignore\nexport const p256 = createCurve({\n  a: CURVE_A,\n  // Equation params: a, b\n  b: CURVE_B,\n  Fp: Fp256,\n  // Field: 2n**224n * (2n**32n-1n) + 2n**192n + 2n**96n-1n\n  // Curve order, total count of valid points in the field\n  n: BigInt('0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551'),\n  // Base (generator) point (x, y)\n  Gx: BigInt('0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296'),\n  Gy: BigInt('0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5'),\n  h: BigInt(1),\n  lowS: false\n}, sha256);\n/** Alias to p256. */\nexport const secp256r1 = p256;\nconst mapSWU = /* @__PURE__ */(() => mapToCurveSimpleSWU(Fp256, {\n  A: CURVE_A,\n  B: CURVE_B,\n  Z: Fp256.create(BigInt('-10'))\n}))();\nconst htf = /* @__PURE__ */(() => createHasher(secp256r1.ProjectivePoint, scalars => mapSWU(scalars[0]), {\n  DST: 'P256_XMD:SHA-256_SSWU_RO_',\n  encodeDST: 'P256_XMD:SHA-256_SSWU_NU_',\n  p: Fp256.ORDER,\n  m: 1,\n  k: 128,\n  expand: 'xmd',\n  hash: sha256\n}))();\n/** secp256r1 hash-to-curve from [RFC 9380](https://www.rfc-editor.org/rfc/rfc9380). */\nexport const hashToCurve = /* @__PURE__ */(() => htf.hashToCurve)();\n/** secp256r1 encode-to-curve from [RFC 9380](https://www.rfc-editor.org/rfc/rfc9380). */\nexport const encodeToCurve = /* @__PURE__ */(() => htf.encodeToCurve)();","map":{"version":3,"names":["sha256","createCurve","createHasher","Field","mapToCurveSimpleSWU","Fp256","BigInt","CURVE_A","create","CURVE_B","p256","a","b","Fp","n","Gx","Gy","h","lowS","secp256r1","mapSWU","A","B","Z","htf","ProjectivePoint","scalars","DST","encodeDST","p","ORDER","m","k","expand","hash","hashToCurve","encodeToCurve"],"sources":["/home/cala/project/bridgeweb/node_modules/@mysten/sui/node_modules/@noble/curves/src/p256.ts"],"sourcesContent":["/**\n * NIST secp256r1 aka p256.\n * https://www.secg.org/sec2-v2.pdf, https://neuromancer.sk/std/nist/P-256\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { createCurve, type CurveFnWithCreate } from './_shortw_utils.js';\nimport { createHasher, type HTFMethod } from './abstract/hash-to-curve.js';\nimport { Field } from './abstract/modular.js';\nimport { mapToCurveSimpleSWU } from './abstract/weierstrass.js';\n\nconst Fp256 = Field(BigInt('0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff'));\nconst CURVE_A = Fp256.create(BigInt('-3'));\nconst CURVE_B = BigInt('0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b');\n\n/** secp256r1 curve, ECDSA and ECDH methods. */\n// prettier-ignore\nexport const p256: CurveFnWithCreate = createCurve({\n  a: CURVE_A, // Equation params: a, b\n  b: CURVE_B,\n  Fp: Fp256, // Field: 2n**224n * (2n**32n-1n) + 2n**192n + 2n**96n-1n\n  // Curve order, total count of valid points in the field\n  n: BigInt('0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551'),\n  // Base (generator) point (x, y)\n  Gx: BigInt('0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296'),\n  Gy: BigInt('0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5'),\n  h: BigInt(1),\n  lowS: false,\n} as const, sha256);\n/** Alias to p256. */\nexport const secp256r1: CurveFnWithCreate = p256;\n\nconst mapSWU = /* @__PURE__ */ (() =>\n  mapToCurveSimpleSWU(Fp256, {\n    A: CURVE_A,\n    B: CURVE_B,\n    Z: Fp256.create(BigInt('-10')),\n  }))();\n\nconst htf = /* @__PURE__ */ (() =>\n  createHasher(secp256r1.ProjectivePoint, (scalars: bigint[]) => mapSWU(scalars[0]), {\n    DST: 'P256_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'P256_XMD:SHA-256_SSWU_NU_',\n    p: Fp256.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha256,\n  }))();\n/** secp256r1 hash-to-curve from [RFC 9380](https://www.rfc-editor.org/rfc/rfc9380). */\nexport const hashToCurve: HTFMethod<bigint> = /* @__PURE__ */ (() => htf.hashToCurve)();\n/** secp256r1 encode-to-curve from [RFC 9380](https://www.rfc-editor.org/rfc/rfc9380). */\nexport const encodeToCurve: HTFMethod<bigint> = /* @__PURE__ */ (() => htf.encodeToCurve)();\n"],"mappings":"AAAA;;;;;AAKA;AACA,SAASA,MAAM,QAAQ,sBAAsB;AAC7C,SAASC,WAAW,QAAgC,oBAAoB;AACxE,SAASC,YAAY,QAAwB,6BAA6B;AAC1E,SAASC,KAAK,QAAQ,uBAAuB;AAC7C,SAASC,mBAAmB,QAAQ,2BAA2B;AAE/D,MAAMC,KAAK,GAAGF,KAAK,CAACG,MAAM,CAAC,oEAAoE,CAAC,CAAC;AACjG,MAAMC,OAAO,GAAGF,KAAK,CAACG,MAAM,CAACF,MAAM,CAAC,IAAI,CAAC,CAAC;AAC1C,MAAMG,OAAO,GAAGH,MAAM,CAAC,oEAAoE,CAAC;AAE5F;AACA;AACA,OAAO,MAAMI,IAAI,GAAsBT,WAAW,CAAC;EACjDU,CAAC,EAAEJ,OAAO;EAAE;EACZK,CAAC,EAAEH,OAAO;EACVI,EAAE,EAAER,KAAK;EAAE;EACX;EACAS,CAAC,EAAER,MAAM,CAAC,oEAAoE,CAAC;EAC/E;EACAS,EAAE,EAAET,MAAM,CAAC,oEAAoE,CAAC;EAChFU,EAAE,EAAEV,MAAM,CAAC,oEAAoE,CAAC;EAChFW,CAAC,EAAEX,MAAM,CAAC,CAAC,CAAC;EACZY,IAAI,EAAE;CACE,EAAElB,MAAM,CAAC;AACnB;AACA,OAAO,MAAMmB,SAAS,GAAsBT,IAAI;AAEhD,MAAMU,MAAM,GAAG,eAAgB,CAAC,MAC9BhB,mBAAmB,CAACC,KAAK,EAAE;EACzBgB,CAAC,EAAEd,OAAO;EACVe,CAAC,EAAEb,OAAO;EACVc,CAAC,EAAElB,KAAK,CAACG,MAAM,CAACF,MAAM,CAAC,KAAK,CAAC;CAC9B,CAAC,EAAC,CAAE;AAEP,MAAMkB,GAAG,GAAG,eAAgB,CAAC,MAC3BtB,YAAY,CAACiB,SAAS,CAACM,eAAe,EAAGC,OAAiB,IAAKN,MAAM,CAACM,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE;EACjFC,GAAG,EAAE,2BAA2B;EAChCC,SAAS,EAAE,2BAA2B;EACtCC,CAAC,EAAExB,KAAK,CAACyB,KAAK;EACdC,CAAC,EAAE,CAAC;EACJC,CAAC,EAAE,GAAG;EACNC,MAAM,EAAE,KAAK;EACbC,IAAI,EAAElC;CACP,CAAC,EAAC,CAAE;AACP;AACA,OAAO,MAAMmC,WAAW,GAAsB,eAAgB,CAAC,MAAMX,GAAG,CAACW,WAAW,EAAC,CAAE;AACvF;AACA,OAAO,MAAMC,aAAa,GAAsB,eAAgB,CAAC,MAAMZ,GAAG,CAACY,aAAa,EAAC,CAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}