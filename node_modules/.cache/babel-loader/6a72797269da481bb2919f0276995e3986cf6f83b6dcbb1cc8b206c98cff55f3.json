{"ast":null,"code":"var _jsxFileName = \"/home/cala/project/bridgeweb/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { WalletKitProvider, useWalletKit } from \"@mysten/wallet-kit\"; // Ensure this import matches the library's exports\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [ethereumAccount, setEthereumAccount] = useState(\"\");\n  const [suiAccount, setSuiAccount] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n  const {\n    currentAccount,\n    signAndExecuteTransaction\n  } = useWalletKit(); // Use the hook at the top level of the component\n\n  // Connect to Ethereum Wallet (MetaMask)\n  const connectEthereumWallet = async () => {\n    if (typeof window.ethereum !== \"undefined\") {\n      try {\n        const accounts = await window.ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n        setEthereumAccount(accounts[0]);\n      } catch (error) {\n        console.error(\"MetaMask connection failed: \", error);\n      }\n    } else {\n      alert(\"MetaMask is not installed!\");\n    }\n  };\n\n  // Connect to Sui Wallet\n  const connectSuiWallet = () => {\n    if (currentAccount) {\n      setSuiAccount(currentAccount.address); // Assuming the wallet hook provides the address\n    } else {\n      alert(\"Please connect your Sui Wallet!\");\n    }\n  };\n\n  // Bridge tokens from Ethereum to Sui\n  const bridgeToSui = async () => {\n    if (!ethereumAccount || !suiAccount || !amount) {\n      alert(\"Please connect both wallets and specify an amount.\");\n      return;\n    }\n    try {\n      const provider = new ethers.providers.JsonRpcProvider(\"http://127.0.0.1:8545\"); // Local Ethereum provider\n      const signer = provider.getSigner(ethereumAccount);\n\n      // Call burn function on Ethereum contract\n      const ethContractAddress = \"0xYourEthereumContractAddress\"; // Replace with your Ethereum contract address\n      const ethAbi = [\"function burn(uint256 amount) public\"];\n      const ethContract = new ethers.Contract(ethContractAddress, ethAbi, signer);\n      await ethContract.burn(ethers.utils.parseUnits(amount, 18));\n\n      // Call mint function on Sui contract\n      const suiTransaction = {\n        packageObjectId: \"0xYourSuiPackageId\",\n        // Replace with your Sui package ID\n        module: \"suipart\",\n        function: \"mint\",\n        arguments: [suiAccount, parseInt(amount, 10)]\n      };\n      await signAndExecuteTransaction(suiTransaction); // Sui SDK function\n\n      alert(\"Tokens bridged successfully!\");\n    } catch (error) {\n      console.error(\"Error bridging tokens: \", error);\n      alert(\"Failed to bridge tokens.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center justify-center min-h-screen p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"Blockchain Bridge \\uD83C\\uDF09\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: connectEthereumWallet,\n        className: \"px-4 py-2 bg-blue-500 text-white rounded shadow\",\n        children: \"Connect Ethereum Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), ethereumAccount && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Connected Ethereum: \", ethereumAccount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: connectSuiWallet,\n        className: \"px-4 py-2 bg-green-500 text-white rounded shadow\",\n        children: \"Connect Sui Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), suiAccount && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Connected Sui: \", suiAccount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Amount to Bridge\",\n        value: amount,\n        onChange: e => setAmount(e.target.value),\n        className: \"p-2 border rounded w-64\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: bridgeToSui,\n      className: \"px-4 py-2 bg-purple-500 text-white rounded shadow\",\n      children: \"Bridge Tokens to Sui\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"eJ8zcvyqVF1fYVbEKJq321YIWck=\", false, function () {\n  return [useWalletKit];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","ethers","WalletKitProvider","useWalletKit","jsxDEV","_jsxDEV","App","_s","ethereumAccount","setEthereumAccount","suiAccount","setSuiAccount","amount","setAmount","currentAccount","signAndExecuteTransaction","connectEthereumWallet","window","ethereum","accounts","request","method","error","console","alert","connectSuiWallet","address","bridgeToSui","provider","providers","JsonRpcProvider","signer","getSigner","ethContractAddress","ethAbi","ethContract","Contract","burn","utils","parseUnits","suiTransaction","packageObjectId","module","function","arguments","parseInt","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","placeholder","value","onChange","e","target","_c","$RefreshReg$"],"sources":["/home/cala/project/bridgeweb/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { WalletKitProvider, useWalletKit } from \"@mysten/wallet-kit\"; // Ensure this import matches the library's exports\n\nconst App = () => {\n  const [ethereumAccount, setEthereumAccount] = useState(\"\");\n  const [suiAccount, setSuiAccount] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n\n  const { currentAccount, signAndExecuteTransaction } = useWalletKit(); // Use the hook at the top level of the component\n\n  // Connect to Ethereum Wallet (MetaMask)\n  const connectEthereumWallet = async () => {\n    if (typeof window.ethereum !== \"undefined\") {\n      try {\n        const accounts = await window.ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        setEthereumAccount(accounts[0]);\n      } catch (error) {\n        console.error(\"MetaMask connection failed: \", error);\n      }\n    } else {\n      alert(\"MetaMask is not installed!\");\n    }\n  };\n\n  // Connect to Sui Wallet\n  const connectSuiWallet = () => {\n    if (currentAccount) {\n      setSuiAccount(currentAccount.address); // Assuming the wallet hook provides the address\n    } else {\n      alert(\"Please connect your Sui Wallet!\");\n    }\n  };\n\n  // Bridge tokens from Ethereum to Sui\n  const bridgeToSui = async () => {\n    if (!ethereumAccount || !suiAccount || !amount) {\n      alert(\"Please connect both wallets and specify an amount.\");\n      return;\n    }\n\n    try {\n      const provider = new ethers.providers.JsonRpcProvider(\n        \"http://127.0.0.1:8545\"\n      ); // Local Ethereum provider\n      const signer = provider.getSigner(ethereumAccount);\n\n      // Call burn function on Ethereum contract\n      const ethContractAddress = \"0xYourEthereumContractAddress\"; // Replace with your Ethereum contract address\n      const ethAbi = [\"function burn(uint256 amount) public\"];\n      const ethContract = new ethers.Contract(\n        ethContractAddress,\n        ethAbi,\n        signer\n      );\n      await ethContract.burn(ethers.utils.parseUnits(amount, 18));\n\n      // Call mint function on Sui contract\n      const suiTransaction = {\n        packageObjectId: \"0xYourSuiPackageId\", // Replace with your Sui package ID\n        module: \"suipart\",\n        function: \"mint\",\n        arguments: [suiAccount, parseInt(amount, 10)],\n      };\n      await signAndExecuteTransaction(suiTransaction); // Sui SDK function\n\n      alert(\"Tokens bridged successfully!\");\n    } catch (error) {\n      console.error(\"Error bridging tokens: \", error);\n      alert(\"Failed to bridge tokens.\");\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col items-center justify-center min-h-screen p-4\">\n      <h1 className=\"text-2xl font-bold mb-4\">Blockchain Bridge ðŸŒ‰</h1>\n\n      <div className=\"mb-4\">\n        <button\n          onClick={connectEthereumWallet}\n          className=\"px-4 py-2 bg-blue-500 text-white rounded shadow\"\n        >\n          Connect Ethereum Wallet\n        </button>\n        {ethereumAccount && <p>Connected Ethereum: {ethereumAccount}</p>}\n      </div>\n\n      <div className=\"mb-4\">\n        <button\n          onClick={connectSuiWallet}\n          className=\"px-4 py-2 bg-green-500 text-white rounded shadow\"\n        >\n          Connect Sui Wallet\n        </button>\n        {suiAccount && <p>Connected Sui: {suiAccount}</p>}\n      </div>\n\n      <div className=\"mb-4\">\n        <input\n          type=\"number\"\n          placeholder=\"Amount to Bridge\"\n          value={amount}\n          onChange={(e) => setAmount(e.target.value)}\n          className=\"p-2 border rounded w-64\"\n        />\n      </div>\n\n      <button\n        onClick={bridgeToSui}\n        className=\"px-4 py-2 bg-purple-500 text-white rounded shadow\"\n      >\n        Bridge Tokens to Sui\n      </button>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}