{"ast":null,"code":"const bridgeToSui = async () => {\n  if (!ethereumAccount || !wallet.connected || !amount) {\n    alert(\"Please connect both wallets and specify an amount.\");\n    return;\n  }\n  try {\n    // Ethereum: Call Gateway to convert ETH to IBT\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner(ethereumAccount);\n    const gatewayContract = new ethers.Contract(\"0xYourGatewayContractAddress\",\n    // Replace with your Gateway contract address\n    [\"function convertEthToIbt() public payable\" // Gateway ABI\n    ], signer);\n\n    // Send ETH to the Gateway\n    const tx = await gatewayContract.convertEthToIbt({\n      value: ethers.utils.parseEther(amount) // Convert ETH amount to wei\n    });\n    await tx.wait(); // Wait for transaction to complete\n    console.log(`Successfully converted ${amount} ETH to IBT`);\n\n    // Sui: Mint IBT Tokens\n    const suiTransaction = {\n      packageObjectId: \"0xYourSuiPackageId\",\n      // Replace with your Sui package ID\n      module: \"suipart\",\n      function: \"mint\",\n      arguments: [wallet.address, parseFloat(amount)] // Amount in IBT\n    };\n    await wallet.signAndExecuteTransaction({\n      transaction: {\n        kind: \"moveCall\",\n        data: suiTransaction\n      }\n    });\n    alert(`Successfully bridged ${amount} IBT to Sui!`);\n  } catch (error) {\n    console.error(\"Error bridging tokens:\", error);\n    alert(\"Failed to bridge tokens.\");\n  }\n};","map":{"version":3,"names":["bridgeToSui","ethereumAccount","wallet","connected","amount","alert","provider","ethers","providers","Web3Provider","window","ethereum","signer","getSigner","gatewayContract","Contract","tx","convertEthToIbt","value","utils","parseEther","wait","console","log","suiTransaction","packageObjectId","module","function","arguments","address","parseFloat","signAndExecuteTransaction","transaction","kind","data","error"],"sources":["/home/cala/project/bridgeweb/src/App.js"],"sourcesContent":["const bridgeToSui = async () => {\n  if (!ethereumAccount || !wallet.connected || !amount) {\n    alert(\"Please connect both wallets and specify an amount.\");\n    return;\n  }\n\n  try {\n    // Ethereum: Call Gateway to convert ETH to IBT\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner(ethereumAccount);\n\n    const gatewayContract = new ethers.Contract(\n      \"0xYourGatewayContractAddress\", // Replace with your Gateway contract address\n      [\n        \"function convertEthToIbt() public payable\", // Gateway ABI\n      ],\n      signer\n    );\n\n    // Send ETH to the Gateway\n    const tx = await gatewayContract.convertEthToIbt({\n      value: ethers.utils.parseEther(amount), // Convert ETH amount to wei\n    });\n\n    await tx.wait(); // Wait for transaction to complete\n    console.log(`Successfully converted ${amount} ETH to IBT`);\n\n    // Sui: Mint IBT Tokens\n    const suiTransaction = {\n      packageObjectId: \"0xYourSuiPackageId\", // Replace with your Sui package ID\n      module: \"suipart\",\n      function: \"mint\",\n      arguments: [wallet.address, parseFloat(amount)], // Amount in IBT\n    };\n\n    await wallet.signAndExecuteTransaction({\n      transaction: {\n        kind: \"moveCall\",\n        data: suiTransaction,\n      },\n    });\n\n    alert(`Successfully bridged ${amount} IBT to Sui!`);\n  } catch (error) {\n    console.error(\"Error bridging tokens:\", error);\n    alert(\"Failed to bridge tokens.\");\n  }\n};\n"],"mappings":"AAAA,MAAMA,WAAW,GAAG,MAAAA,CAAA,KAAY;EAC9B,IAAI,CAACC,eAAe,IAAI,CAACC,MAAM,CAACC,SAAS,IAAI,CAACC,MAAM,EAAE;IACpDC,KAAK,CAAC,oDAAoD,CAAC;IAC3D;EACF;EAEA,IAAI;IACF;IACA,MAAMC,QAAQ,GAAG,IAAIC,MAAM,CAACC,SAAS,CAACC,YAAY,CAACC,MAAM,CAACC,QAAQ,CAAC;IACnE,MAAMC,MAAM,GAAGN,QAAQ,CAACO,SAAS,CAACZ,eAAe,CAAC;IAElD,MAAMa,eAAe,GAAG,IAAIP,MAAM,CAACQ,QAAQ,CACzC,8BAA8B;IAAE;IAChC,CACE,2CAA2C,CAAE;IAAA,CAC9C,EACDH,MACF,CAAC;;IAED;IACA,MAAMI,EAAE,GAAG,MAAMF,eAAe,CAACG,eAAe,CAAC;MAC/CC,KAAK,EAAEX,MAAM,CAACY,KAAK,CAACC,UAAU,CAAChB,MAAM,CAAC,CAAE;IAC1C,CAAC,CAAC;IAEF,MAAMY,EAAE,CAACK,IAAI,CAAC,CAAC,CAAC,CAAC;IACjBC,OAAO,CAACC,GAAG,CAAC,0BAA0BnB,MAAM,aAAa,CAAC;;IAE1D;IACA,MAAMoB,cAAc,GAAG;MACrBC,eAAe,EAAE,oBAAoB;MAAE;MACvCC,MAAM,EAAE,SAAS;MACjBC,QAAQ,EAAE,MAAM;MAChBC,SAAS,EAAE,CAAC1B,MAAM,CAAC2B,OAAO,EAAEC,UAAU,CAAC1B,MAAM,CAAC,CAAC,CAAE;IACnD,CAAC;IAED,MAAMF,MAAM,CAAC6B,yBAAyB,CAAC;MACrCC,WAAW,EAAE;QACXC,IAAI,EAAE,UAAU;QAChBC,IAAI,EAAEV;MACR;IACF,CAAC,CAAC;IAEFnB,KAAK,CAAC,wBAAwBD,MAAM,cAAc,CAAC;EACrD,CAAC,CAAC,OAAO+B,KAAK,EAAE;IACdb,OAAO,CAACa,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C9B,KAAK,CAAC,0BAA0B,CAAC;EACnC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}