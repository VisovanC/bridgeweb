{"ast":null,"code":"var _jsxFileName = \"/home/cala/project/bridgeweb/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { useWallet, ConnectButton } from \"@suiet/wallet-kit\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [ethereumAccount, setEthereumAccount] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n  const wallet = useWallet();\n  const connectEthereumWallet = async () => {\n    if (typeof window.ethereum !== \"undefined\") {\n      try {\n        const accounts = await window.ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n        setEthereumAccount(accounts[0]);\n      } catch (error) {\n        console.error(\"MetaMask connection failed: \", error);\n      }\n    } else {\n      alert(\"MetaMask is not installed!\");\n    }\n  };\n  const bridgeToSui = async () => {\n    if (!ethereumAccount || !wallet.connected || !amount) {\n      alert(\"Please connect both wallets and specify an amount.\");\n      return;\n    }\n    try {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const ethContractAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\";\n      const ethAbi = [{\n        \"type\": \"function\",\n        \"name\": \"convertETHToIBT\",\n        \"inputs\": [],\n        \"outputs\": [],\n        \"stateMutability\": \"payable\"\n      }];\n      const ethContract = new ethers.Contract(ethContractAddress, ethAbi, signer);\n      const weiAmount = ethers.utils.parseEther(amount);\n      const transaction = await ethContract.convertETHToIBT({\n        value: weiAmount\n      });\n      await transaction.wait();\n      const suiTransaction = {\n        packageObjectId: \"0x9330eb39cba20119511b782e48f2695ab242414e80342b0a69972d0bf4e32298\",\n        module: \"suipart\",\n        function: \"mint\",\n        arguments: [wallet.address, ethers.utils.parseUnits(amount, 18).toString()],\n        gasBudget: 10000\n      };\n      await wallet.signAndExecuteTransaction({\n        transaction: {\n          kind: \"moveCall\",\n          data: suiTransaction\n        }\n      });\n      alert(`Successfully bridged ${amount} ETH to IBT on Sui!`);\n    } catch (error) {\n      console.error(\"Error bridging tokens: \", error);\n      alert(\"Failed to bridge tokens.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center justify-center min-h-screen p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"Blockchain Bridge \\uD83C\\uDF09\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: connectEthereumWallet,\n        className: \"px-4 py-2 bg-blue-500 text-white rounded shadow\",\n        children: \"Connect Ethereum Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), ethereumAccount && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Connected Ethereum: \", ethereumAccount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 37\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(ConnectButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), wallet.connected && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Connected Sui: \", wallet.address]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 38\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Amount to Bridge\",\n        value: amount,\n        onChange: e => setAmount(e.target.value),\n        className: \"p-2 border rounded w-64\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: bridgeToSui,\n      className: \"px-4 py-2 bg-purple-500 text-white rounded shadow\",\n      children: \"Bridge Tokens to Sui\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"DhHlpp6C2Usf7OLaMNqUbjwEwzU=\", false, function () {\n  return [useWallet];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","ethers","useWallet","ConnectButton","jsxDEV","_jsxDEV","App","_s","ethereumAccount","setEthereumAccount","amount","setAmount","wallet","connectEthereumWallet","window","ethereum","accounts","request","method","error","console","alert","bridgeToSui","connected","provider","providers","Web3Provider","signer","getSigner","ethContractAddress","ethAbi","ethContract","Contract","weiAmount","utils","parseEther","transaction","convertETHToIBT","value","wait","suiTransaction","packageObjectId","module","function","arguments","address","parseUnits","toString","gasBudget","signAndExecuteTransaction","kind","data","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","placeholder","onChange","e","target","_c","$RefreshReg$"],"sources":["/home/cala/project/bridgeweb/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { useWallet, ConnectButton } from \"@suiet/wallet-kit\";\n\nconst App = () => {\n    const [ethereumAccount, setEthereumAccount] = useState(\"\");\n    const [amount, setAmount] = useState(\"\");\n    const wallet = useWallet();\n\n    const connectEthereumWallet = async () => {\n        if (typeof window.ethereum !== \"undefined\") {\n            try {\n                const accounts = await window.ethereum.request({\n                    method: \"eth_requestAccounts\",\n                });\n                setEthereumAccount(accounts[0]);\n            } catch (error) {\n                console.error(\"MetaMask connection failed: \", error);\n            }\n        } else {\n            alert(\"MetaMask is not installed!\");\n        }\n    };\n\n    const bridgeToSui = async () => {\n        if (!ethereumAccount || !wallet.connected || !amount) {\n            alert(\"Please connect both wallets and specify an amount.\");\n            return;\n        }\n\n        try {\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            const signer = provider.getSigner();\n            const ethContractAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\";\n            const ethAbi = [\n                {\n                    \"type\": \"function\",\n                    \"name\": \"convertETHToIBT\",\n                    \"inputs\": [],\n                    \"outputs\": [],\n                    \"stateMutability\": \"payable\",\n                }\n            ];\n\n            const ethContract = new ethers.Contract(\n                ethContractAddress,\n                ethAbi,\n                signer\n            );\n            const weiAmount = ethers.utils.parseEther(amount);\n            const transaction = await ethContract.convertETHToIBT({\n                value: weiAmount\n            });\n            await transaction.wait();\n\n            const suiTransaction = {\n                packageObjectId: \"0x9330eb39cba20119511b782e48f2695ab242414e80342b0a69972d0bf4e32298\",\n                module: \"suipart\",\n                function: \"mint\",\n                arguments: [\n                    wallet.address, \n                    ethers.utils.parseUnits(amount, 18).toString()\n                ],\n                gasBudget: 10000\n            };\n\n            await wallet.signAndExecuteTransaction({\n                transaction: {\n                    kind: \"moveCall\",\n                    data: suiTransaction,\n                }\n            });\n\n            alert(`Successfully bridged ${amount} ETH to IBT on Sui!`);\n        } catch (error) {\n            console.error(\"Error bridging tokens: \", error);\n            alert(\"Failed to bridge tokens.\");\n        }\n    };\n\n    return (\n        <div className=\"flex flex-col items-center justify-center min-h-screen p-4\">\n            <h1 className=\"text-2xl font-bold mb-4\">Blockchain Bridge ðŸŒ‰</h1>\n            <div className=\"mb-4\">\n                <button\n                    onClick={connectEthereumWallet}\n                    className=\"px-4 py-2 bg-blue-500 text-white rounded shadow\"\n                >\n                    Connect Ethereum Wallet\n                </button>\n                {ethereumAccount && <p>Connected Ethereum: {ethereumAccount}</p>}\n            </div>\n            <div className=\"mb-4\">\n                <ConnectButton />\n                {wallet.connected && <p>Connected Sui: {wallet.address}</p>}\n            </div>\n            <div className=\"mb-4\">\n                <input\n                    type=\"number\"\n                    placeholder=\"Amount to Bridge\"\n                    value={amount}\n                    onChange={(e) => setAmount(e.target.value)}\n                    className=\"p-2 border rounded w-64\"\n                />\n            </div>\n            <button\n                onClick={bridgeToSui}\n                className=\"px-4 py-2 bg-purple-500 text-white rounded shadow\"\n            >\n                Bridge Tokens to Sui\n            </button>\n        </div>\n    );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}