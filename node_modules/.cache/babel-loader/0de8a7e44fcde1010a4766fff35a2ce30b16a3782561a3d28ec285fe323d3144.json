{"ast":null,"code":"import { fromBase64 } from \"@mysten/bcs\";\nimport { secp256k1 } from \"@noble/curves/secp256k1\";\nimport { sha256 } from \"@noble/hashes/sha256\";\nimport { bytesEqual, PublicKey } from \"../../cryptography/publickey.js\";\nimport { SIGNATURE_SCHEME_TO_FLAG } from \"../../cryptography/signature-scheme.js\";\nimport { parseSerializedSignature } from \"../../cryptography/signature.js\";\nconst SECP256K1_PUBLIC_KEY_SIZE = 33;\nclass Secp256k1PublicKey extends PublicKey {\n  /**\n   * Create a new Secp256k1PublicKey object\n   * @param value secp256k1 public key as buffer or base-64 encoded string\n   */\n  constructor(value) {\n    super();\n    if (typeof value === \"string\") {\n      this.data = fromBase64(value);\n    } else if (value instanceof Uint8Array) {\n      this.data = value;\n    } else {\n      this.data = Uint8Array.from(value);\n    }\n    if (this.data.length !== SECP256K1_PUBLIC_KEY_SIZE) {\n      throw new Error(`Invalid public key input. Expected ${SECP256K1_PUBLIC_KEY_SIZE} bytes, got ${this.data.length}`);\n    }\n  }\n  /**\n   * Checks if two Secp256k1 public keys are equal\n   */\n  equals(publicKey) {\n    return super.equals(publicKey);\n  }\n  /**\n   * Return the byte array representation of the Secp256k1 public key\n   */\n  toRawBytes() {\n    return this.data;\n  }\n  /**\n   * Return the Sui address associated with this Secp256k1 public key\n   */\n  flag() {\n    return SIGNATURE_SCHEME_TO_FLAG[\"Secp256k1\"];\n  }\n  /**\n   * Verifies that the signature is valid for for the provided message\n   */\n  async verify(message, signature) {\n    let bytes;\n    if (typeof signature === \"string\") {\n      const parsed = parseSerializedSignature(signature);\n      if (parsed.signatureScheme !== \"Secp256k1\") {\n        throw new Error(\"Invalid signature scheme\");\n      }\n      if (!bytesEqual(this.toRawBytes(), parsed.publicKey)) {\n        throw new Error(\"Signature does not match public key\");\n      }\n      bytes = parsed.signature;\n    } else {\n      bytes = signature;\n    }\n    return secp256k1.verify(secp256k1.Signature.fromCompact(bytes), sha256(message), this.toRawBytes());\n  }\n}\nSecp256k1PublicKey.SIZE = SECP256K1_PUBLIC_KEY_SIZE;\nexport { Secp256k1PublicKey };","map":{"version":3,"names":["fromBase64","secp256k1","sha256","bytesEqual","PublicKey","SIGNATURE_SCHEME_TO_FLAG","parseSerializedSignature","SECP256K1_PUBLIC_KEY_SIZE","Secp256k1PublicKey","constructor","value","data","Uint8Array","from","length","Error","equals","publicKey","toRawBytes","flag","verify","message","signature","bytes","parsed","signatureScheme","Signature","fromCompact","SIZE"],"sources":["/home/cala/project/bridgeweb/node_modules/@suiet/wallet-kit/node_modules/@mysten/sui/src/keypairs/secp256k1/publickey.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromBase64 } from '@mysten/bcs';\nimport { secp256k1 } from '@noble/curves/secp256k1';\nimport { sha256 } from '@noble/hashes/sha256';\n\nimport { bytesEqual, PublicKey } from '../../cryptography/publickey.js';\nimport type { PublicKeyInitData } from '../../cryptography/publickey.js';\nimport { SIGNATURE_SCHEME_TO_FLAG } from '../../cryptography/signature-scheme.js';\nimport { parseSerializedSignature } from '../../cryptography/signature.js';\n\nconst SECP256K1_PUBLIC_KEY_SIZE = 33;\n\n/**\n * A Secp256k1 public key\n */\nexport class Secp256k1PublicKey extends PublicKey {\n\tstatic SIZE = SECP256K1_PUBLIC_KEY_SIZE;\n\tprivate data: Uint8Array;\n\n\t/**\n\t * Create a new Secp256k1PublicKey object\n\t * @param value secp256k1 public key as buffer or base-64 encoded string\n\t */\n\tconstructor(value: PublicKeyInitData) {\n\t\tsuper();\n\n\t\tif (typeof value === 'string') {\n\t\t\tthis.data = fromBase64(value);\n\t\t} else if (value instanceof Uint8Array) {\n\t\t\tthis.data = value;\n\t\t} else {\n\t\t\tthis.data = Uint8Array.from(value);\n\t\t}\n\n\t\tif (this.data.length !== SECP256K1_PUBLIC_KEY_SIZE) {\n\t\t\tthrow new Error(\n\t\t\t\t`Invalid public key input. Expected ${SECP256K1_PUBLIC_KEY_SIZE} bytes, got ${this.data.length}`,\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Checks if two Secp256k1 public keys are equal\n\t */\n\toverride equals(publicKey: Secp256k1PublicKey): boolean {\n\t\treturn super.equals(publicKey);\n\t}\n\n\t/**\n\t * Return the byte array representation of the Secp256k1 public key\n\t */\n\ttoRawBytes(): Uint8Array {\n\t\treturn this.data;\n\t}\n\n\t/**\n\t * Return the Sui address associated with this Secp256k1 public key\n\t */\n\tflag(): number {\n\t\treturn SIGNATURE_SCHEME_TO_FLAG['Secp256k1'];\n\t}\n\n\t/**\n\t * Verifies that the signature is valid for for the provided message\n\t */\n\tasync verify(message: Uint8Array, signature: Uint8Array | string): Promise<boolean> {\n\t\tlet bytes;\n\t\tif (typeof signature === 'string') {\n\t\t\tconst parsed = parseSerializedSignature(signature);\n\t\t\tif (parsed.signatureScheme !== 'Secp256k1') {\n\t\t\t\tthrow new Error('Invalid signature scheme');\n\t\t\t}\n\n\t\t\tif (!bytesEqual(this.toRawBytes(), parsed.publicKey)) {\n\t\t\t\tthrow new Error('Signature does not match public key');\n\t\t\t}\n\n\t\t\tbytes = parsed.signature;\n\t\t} else {\n\t\t\tbytes = signature;\n\t\t}\n\n\t\treturn secp256k1.verify(\n\t\t\tsecp256k1.Signature.fromCompact(bytes),\n\t\t\tsha256(message),\n\t\t\tthis.toRawBytes(),\n\t\t);\n\t}\n}\n"],"mappings":"AAGA,SAASA,UAAA,QAAkB;AAC3B,SAASC,SAAA,QAAiB;AAC1B,SAASC,MAAA,QAAc;AAEvB,SAASC,UAAA,EAAYC,SAAA,QAAiB;AAEtC,SAASC,wBAAA,QAAgC;AACzC,SAASC,wBAAA,QAAgC;AAEzC,MAAMC,yBAAA,GAA4B;AAK3B,MAAMC,kBAAA,SAA2BJ,SAAA,CAAU;EAAA;AAAA;AAAA;AAAA;EAQjDK,YAAYC,KAAA,EAA0B;IACrC,MAAM;IAEN,IAAI,OAAOA,KAAA,KAAU,UAAU;MAC9B,KAAKC,IAAA,GAAOX,UAAA,CAAWU,KAAK;IAC7B,WAAWA,KAAA,YAAiBE,UAAA,EAAY;MACvC,KAAKD,IAAA,GAAOD,KAAA;IACb,OAAO;MACN,KAAKC,IAAA,GAAOC,UAAA,CAAWC,IAAA,CAAKH,KAAK;IAClC;IAEA,IAAI,KAAKC,IAAA,CAAKG,MAAA,KAAWP,yBAAA,EAA2B;MACnD,MAAM,IAAIQ,KAAA,CACT,sCAAsCR,yBAAyB,eAAe,KAAKI,IAAA,CAAKG,MAAM,EAC/F;IACD;EACD;EAAA;AAAA;AAAA;EAKSE,OAAOC,SAAA,EAAwC;IACvD,OAAO,MAAMD,MAAA,CAAOC,SAAS;EAC9B;EAAA;AAAA;AAAA;EAKAC,WAAA,EAAyB;IACxB,OAAO,KAAKP,IAAA;EACb;EAAA;AAAA;AAAA;EAKAQ,KAAA,EAAe;IACd,OAAOd,wBAAA,CAAyB,WAAW;EAC5C;EAAA;AAAA;AAAA;EAKA,MAAMe,OAAOC,OAAA,EAAqBC,SAAA,EAAkD;IACnF,IAAIC,KAAA;IACJ,IAAI,OAAOD,SAAA,KAAc,UAAU;MAClC,MAAME,MAAA,GAASlB,wBAAA,CAAyBgB,SAAS;MACjD,IAAIE,MAAA,CAAOC,eAAA,KAAoB,aAAa;QAC3C,MAAM,IAAIV,KAAA,CAAM,0BAA0B;MAC3C;MAEA,IAAI,CAACZ,UAAA,CAAW,KAAKe,UAAA,CAAW,GAAGM,MAAA,CAAOP,SAAS,GAAG;QACrD,MAAM,IAAIF,KAAA,CAAM,qCAAqC;MACtD;MAEAQ,KAAA,GAAQC,MAAA,CAAOF,SAAA;IAChB,OAAO;MACNC,KAAA,GAAQD,SAAA;IACT;IAEA,OAAOrB,SAAA,CAAUmB,MAAA,CAChBnB,SAAA,CAAUyB,SAAA,CAAUC,WAAA,CAAYJ,KAAK,GACrCrB,MAAA,CAAOmB,OAAO,GACd,KAAKH,UAAA,CAAW,CACjB;EACD;AACD;AAzEaV,kBAAA,CACLoB,IAAA,GAAOrB,yBAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}