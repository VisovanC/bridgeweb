{"version":3,"sources":["../src/WalletContext.tsx","../src/useWalletAdapters.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  createContext,\n  FC,\n  ReactNode,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport type {\n  SuiAddress,\n  SuiTransactionResponse,\n  SignableTransaction,\n} from \"@mysten/sui.js\";\nimport { WalletAdapter, WalletAdapterList } from \"@mysten/wallet-adapter-base\";\nimport { useWalletAdapters } from \"./useWalletAdapters\";\n\nconst DEFAULT_STORAGE_KEY = \"preferredSuiWallet\";\n\nexport enum WalletConnectionStatus {\n  DISCONNECTED = \"DISCONNECTED\",\n  CONNECTING = \"CONNECTING\",\n  CONNECTED = \"CONNECTED\",\n  // TODO: Figure out if this is really a separate status, or is just a piece of state alongside the `disconnected` state:\n  ERROR = \"ERROR\",\n}\n\nexport interface WalletContextState {\n  adapters: WalletAdapterList;\n  wallets: WalletAdapter[];\n\n  // Wallet that we are currently connected to\n  wallet: WalletAdapter | null;\n\n  status: WalletConnectionStatus;\n  connecting: boolean;\n  connected: boolean;\n  isError: boolean;\n\n  select(walletName: string): void;\n  disconnect(): Promise<void>;\n\n  getAccounts: () => Promise<SuiAddress[]>;\n\n  signAndExecuteTransaction(\n    transaction: SignableTransaction\n  ): Promise<SuiTransactionResponse>;\n}\n\nexport const WalletContext = createContext<WalletContextState | null>(null);\n\n// TODO: Add storage adapter interface\n// TODO: Add storage key option\nexport interface WalletProviderProps {\n  children: ReactNode;\n  adapters: WalletAdapterList;\n  autoConnect?: boolean;\n}\n\nexport const WalletProvider: FC<WalletProviderProps> = ({\n  children,\n  adapters,\n  autoConnect = true,\n}) => {\n  const wallets = useWalletAdapters(adapters);\n\n  const [status, setStatus] = useState(WalletConnectionStatus.DISCONNECTED);\n  const [wallet, setWallet] = useState<WalletAdapter | null>(null);\n\n  const connected = status === WalletConnectionStatus.CONNECTED;\n  const connecting = status === WalletConnectionStatus.CONNECTING;\n  const isError = status === WalletConnectionStatus.ERROR;\n\n  const disconnect = useCallback(async () => {\n    wallet?.disconnect();\n    setStatus(WalletConnectionStatus.DISCONNECTED);\n    setWallet(null);\n    localStorage.removeItem(DEFAULT_STORAGE_KEY);\n  }, []);\n\n  // Once we connect, we remember that we've connected before to enable auto-connect:\n  useEffect(() => {\n    if (connected && wallet) {\n      localStorage.setItem(DEFAULT_STORAGE_KEY, wallet.name);\n    }\n  }, [wallet, connected]);\n\n  const select = useCallback(\n    async (name: string) => {\n      let selectedWallet =\n        wallets.find((wallet) => wallet.name === name) ?? null;\n\n      setWallet(selectedWallet);\n\n      if (selectedWallet && !selectedWallet.connecting) {\n        try {\n          setStatus(WalletConnectionStatus.CONNECTING);\n          await selectedWallet.connect();\n          setStatus(WalletConnectionStatus.CONNECTED);\n        } catch (e) {\n          console.log(\"Wallet connection error\", e);\n          setStatus(WalletConnectionStatus.ERROR);\n        }\n      } else {\n        setStatus(WalletConnectionStatus.DISCONNECTED);\n      }\n    },\n    [wallets]\n  );\n\n  // Auto-connect to the preferred wallet if there is one in storage:\n  useEffect(() => {\n    if (!wallet && !connected && !connecting && autoConnect) {\n      let preferredWallet = localStorage.getItem(DEFAULT_STORAGE_KEY);\n      if (typeof preferredWallet === \"string\") {\n        select(preferredWallet);\n      }\n    }\n  }, [wallet, connected, connecting, select, autoConnect]);\n\n  const walletContext = useMemo<WalletContextState>(\n    () => ({\n      adapters,\n      wallets,\n      wallet,\n      status,\n      connecting,\n      connected,\n      isError,\n      select,\n      disconnect,\n\n      async getAccounts() {\n        if (wallet == null) throw Error(\"Wallet Not Connected\");\n        return wallet.getAccounts();\n      },\n\n      async signAndExecuteTransaction(transaction) {\n        if (wallet == null) {\n          throw new Error(\"Wallet Not Connected\");\n        }\n        if (!wallet.signAndExecuteTransaction) {\n          throw new Error(\n            'Wallet does not support \"signAndExecuteTransaction\" method'\n          );\n        }\n        return wallet.signAndExecuteTransaction(transaction);\n      },\n    }),\n    [\n      wallets,\n      adapters,\n      wallet,\n      select,\n      disconnect,\n      connecting,\n      connected,\n      status,\n      isError,\n    ]\n  );\n\n  return (\n    <WalletContext.Provider value={walletContext}>\n      {children}\n    </WalletContext.Provider>\n  );\n};\n\nexport function useWallet(): WalletContextState {\n  const context = useContext(WalletContext);\n\n  if (!context) {\n    throw new Error(\n      \"You tried to access the `WalletContext` outside of the `WalletProvider`.\"\n    );\n  }\n\n  return context;\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  WalletAdapterList,\n  isWalletProvider,\n  resolveAdapters,\n} from \"@mysten/wallet-adapter-base\";\nimport { useEffect, useState } from \"react\";\n\nexport function useWalletAdapters(adapterAndProviders: WalletAdapterList) {\n  const [wallets, setWallets] = useState(() =>\n    resolveAdapters(adapterAndProviders)\n  );\n\n  useEffect(() => {\n    const providers = adapterAndProviders.filter(isWalletProvider);\n    if (!providers.length) return;\n\n    // Re-resolve the adapters just in case a provider has injected\n    // before we've been able to attach an event listener:\n    setWallets(resolveAdapters(adapterAndProviders));\n\n    const listeners = providers.map((provider) =>\n      provider.on(\"changed\", () => {\n        setWallets(resolveAdapters(adapterAndProviders));\n      })\n    );\n\n    return () => {\n      listeners.forEach((unlisten) => unlisten());\n    };\n  }, [adapterAndProviders]);\n\n  return wallets;\n}\n"],"mappings":"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","names":["useEffect","useState","WalletConnectionStatus","useState","useEffect","wallet"]}