"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  WalletConnectionStatus: () => WalletConnectionStatus,
  WalletContext: () => WalletContext,
  WalletProvider: () => WalletProvider,
  useWallet: () => useWallet
});
module.exports = __toCommonJS(src_exports);

// src/WalletContext.tsx
var import_react2 = require("react");

// src/useWalletAdapters.ts
var import_wallet_adapter_base = require("@mysten/wallet-adapter-base");
var import_react = require("react");
function useWalletAdapters(adapterAndProviders) {
  const [wallets, setWallets] = (0, import_react.useState)(
    () => (0, import_wallet_adapter_base.resolveAdapters)(adapterAndProviders)
  );
  (0, import_react.useEffect)(() => {
    const providers = adapterAndProviders.filter(import_wallet_adapter_base.isWalletProvider);
    if (!providers.length)
      return;
    setWallets((0, import_wallet_adapter_base.resolveAdapters)(adapterAndProviders));
    const listeners = providers.map(
      (provider) => provider.on("changed", () => {
        setWallets((0, import_wallet_adapter_base.resolveAdapters)(adapterAndProviders));
      })
    );
    return () => {
      listeners.forEach((unlisten) => unlisten());
    };
  }, [adapterAndProviders]);
  return wallets;
}

// src/WalletContext.tsx
var import_jsx_runtime = require("react/jsx-runtime");
var DEFAULT_STORAGE_KEY = "preferredSuiWallet";
var WalletConnectionStatus = /* @__PURE__ */ ((WalletConnectionStatus2) => {
  WalletConnectionStatus2["DISCONNECTED"] = "DISCONNECTED";
  WalletConnectionStatus2["CONNECTING"] = "CONNECTING";
  WalletConnectionStatus2["CONNECTED"] = "CONNECTED";
  WalletConnectionStatus2["ERROR"] = "ERROR";
  return WalletConnectionStatus2;
})(WalletConnectionStatus || {});
var WalletContext = (0, import_react2.createContext)(null);
var WalletProvider = ({
  children,
  adapters,
  autoConnect = true
}) => {
  const wallets = useWalletAdapters(adapters);
  const [status, setStatus] = (0, import_react2.useState)("DISCONNECTED" /* DISCONNECTED */);
  const [wallet, setWallet] = (0, import_react2.useState)(null);
  const connected = status === "CONNECTED" /* CONNECTED */;
  const connecting = status === "CONNECTING" /* CONNECTING */;
  const isError = status === "ERROR" /* ERROR */;
  const disconnect = (0, import_react2.useCallback)(async () => {
    wallet == null ? void 0 : wallet.disconnect();
    setStatus("DISCONNECTED" /* DISCONNECTED */);
    setWallet(null);
    localStorage.removeItem(DEFAULT_STORAGE_KEY);
  }, []);
  (0, import_react2.useEffect)(() => {
    if (connected && wallet) {
      localStorage.setItem(DEFAULT_STORAGE_KEY, wallet.name);
    }
  }, [wallet, connected]);
  const select = (0, import_react2.useCallback)(
    async (name) => {
      let selectedWallet = wallets.find((wallet2) => wallet2.name === name) ?? null;
      setWallet(selectedWallet);
      if (selectedWallet && !selectedWallet.connecting) {
        try {
          setStatus("CONNECTING" /* CONNECTING */);
          await selectedWallet.connect();
          setStatus("CONNECTED" /* CONNECTED */);
        } catch (e) {
          console.log("Wallet connection error", e);
          setStatus("ERROR" /* ERROR */);
        }
      } else {
        setStatus("DISCONNECTED" /* DISCONNECTED */);
      }
    },
    [wallets]
  );
  (0, import_react2.useEffect)(() => {
    if (!wallet && !connected && !connecting && autoConnect) {
      let preferredWallet = localStorage.getItem(DEFAULT_STORAGE_KEY);
      if (typeof preferredWallet === "string") {
        select(preferredWallet);
      }
    }
  }, [wallet, connected, connecting, select, autoConnect]);
  const walletContext = (0, import_react2.useMemo)(
    () => ({
      adapters,
      wallets,
      wallet,
      status,
      connecting,
      connected,
      isError,
      select,
      disconnect,
      async getAccounts() {
        if (wallet == null)
          throw Error("Wallet Not Connected");
        return wallet.getAccounts();
      },
      async signAndExecuteTransaction(transaction) {
        if (wallet == null) {
          throw new Error("Wallet Not Connected");
        }
        if (!wallet.signAndExecuteTransaction) {
          throw new Error(
            'Wallet does not support "signAndExecuteTransaction" method'
          );
        }
        return wallet.signAndExecuteTransaction(transaction);
      }
    }),
    [
      wallets,
      adapters,
      wallet,
      select,
      disconnect,
      connecting,
      connected,
      status,
      isError
    ]
  );
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(WalletContext.Provider, {
    value: walletContext,
    children
  });
};
function useWallet() {
  const context = (0, import_react2.useContext)(WalletContext);
  if (!context) {
    throw new Error(
      "You tried to access the `WalletContext` outside of the `WalletProvider`."
    );
  }
  return context;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  WalletConnectionStatus,
  WalletContext,
  WalletProvider,
  useWallet
});
//# sourceMappingURL=index.js.map